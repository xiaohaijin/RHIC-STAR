
------------- Chronological function call hierarchy ------------

StDAQMaker:Init
  StDAQReader::StDAQReader
St_trg_Maker::Init(reads dataset, gets pointer to StDAQReader)
StDAQMaker::Make
  StDAQReader::readEvent
    EventReader::EventReader (held in fEventReader)
    EventReader::InitEventReader(fFd,fOffset,0)
    if(exists) StTRGReader::Update(see below)
St_trg_Maker::Make
  StDAQReader::getTRGReader (fVictor)
    (firstTimeOnly) StTRGReader::StTRGReader
      StTRGReader::Update(see below)

StTRGReader::Update
  TRG_Reader *::getTRGReader(EventReader *fDAQReader->fEventReader)
    TRG_Reader::TRG_Reader(EventReader *er, Bank_TRGP *pTRGP)

-------------- Class functionality hierarchy --------------------

StDAQMaker St_trg_Maker
  StDAQReader
    EventReader
    StTRGReader
      TRG_Reader

----------------------------- Classes ---------------------------

class StDAQMaker   StDAQMaker/StDAQMaker.cxx
class StDAQReader  StDAQMaker/StDAQReader.cxx
class StTRGReader  StDAQMaker/StTRGReader.cxx

class St_trg_Maker St_trg_Maker/St_trg_Maker.cxx

class TRG_Reader   StDaqLib/TRG/TRG.cxx (.h file TRG_Reader.h)
class EventReader  StDaqLib/GENERIC/EventReader.cxx

------------------------------ C functions ----------------------

fnct  getTRGReader StDaqLib/GENERIC/DetectorReader.cxx
  
------------ Class variables that point to other classes --------

StDAQReader *StDAQMaker  :: fDAQReader
EventReader *StDAQReader :: fEventReader
StTRGReader *StDAQReader :: fTRGReader
TRG_Reader  *StTRGReader :: fTRGImpReader
StDAQReader *StTRGReader :: fDAQReader
                        StRoot/St_trg_Maker AND ITS
                    RELATIONSHIP WITH StRoot/StDAQMaker
=================================================================================
This document is in StRoot/St_trg_Maker/notes.txt
=================================================================================
                             INTRODUCTION

This document describes how StDAQMaker, StDAQReader, St_trg_Maker, and 
StTRGReader work.

It might also be useful for fans of the TPC and other detectors.
StTPCReader is similar to StTRGReader, but more complicated
because of pad and sequence listing, versioning (TPCV1P0_Reader and
TPCV2P0_Reader), sector numbering, zero suppression, and maybe more 
that I can't think of.

First read the section "SYNOPSIS" below.  If it is inadequately
detailed for you, read the section "HOW THE CLASSES INTERRELATE" with 
a pencil and a blank sheet of paper for drawing a diagram.  You will have
to look at the code to make a good diagram.  Be sure your diagram includes 
the items in the section "MAJOR PLAYERS", and indicates which 
functions call which functions, which data are input and output 
of which functions, and shows where each class is instantiated.
Then try to make sense of the THING sections.

=================================================================================
                        MAJOR PLAYERS      

    GENERIC ::getTRGReader()

    StDAQMaker::Make()

    StDAQReader::fEventReader
    StDAQReader::fTRGReader
    StDAQReader::getTheTriggerReader()
    StDAQReader::readEvent()

    StTRGReader::Update()
    StTRGReader::fTRGImpReader
    StTRGReader::fDAQReader squirrel

    St_trg_Maker::Init()
    St_trg_Maker::Make()

    a dataset named "StDAQReader"


=================================================================================
                               SYNOPSIS

Briefly, StDAQMaker makes a dataset (table) named "StDAQReader".  It instantiates
the class StDAQReader and puts the pointer in the dataset.  St_trg_Maker
gets the pointer from the dataset.  Using this pointer, St_trg_Maker calls
StDAQReader::getTheTriggerReader which returns a pointer to an instnatiation
of StTRGReader which is maintained by StDAQMaker::Make()/StDAQReader::readEvent.
Thus St_trg_Maker has a pointer to an event-wise up-to-date StTRGReader which
has various accessor functions for getting the trigger data.  St_trg_Maker puts
these data into tables destined for the DST area.

=================================================================================
                      HOW THE CLASSES INTERRELATE

StDAQMaker, being a maker, is instantiated by StChain (or something like that).
During its Init(), it creates a dataset named "StDAQReader", instantiates the
class StDAQReader, and puts the address into the table.

St_trg_Maker, also a maker, gets the address of the StDAQReader from the dataset
during its Init().

During the event loop, we have two makers, so we have two Make functions
to consider.  They are described in the next two paragraphs.

The first, StDAQMaker::Make, calls fDaqReader->readEvent() [aka
StDAQReader::readEvent].  This function creates a new EventReader(),  sets
the file offset to fOffset (the next event, usually) and stores the value in
fEventReader.  Then it calls fTRGReader->Update() (see THING 2 below).
The StTRGReader class has the address of StDAQReader squirrelled
away (THING 1 below), so that the update of fEventReader earlier in 
readEvent is available for StTRGReader::Update().

The second, St_trg_Maker::Maker (in analogy to St_tpcdaq_Maker::Make), uses
the address of StDAQReader [from Init()] runs getTheTriggerReader.  The 1st event
is different than the later events in a somewhat confusing way, see THING 2
below.

=================================================================================
              THING NUMBER 1 THAT'S CONFUSING

The address of StDAQReader is squirrelled away in StTRGReader as a "global", so
that calls to StTRGReader::Update() are not easy to understand.

=================================================================================
              THING NUMBER 2 THAT'S CONFUSING

Function fTPCReader->Update is called in two different places:
StDAQMaker::readEvent and StTPCReader::StTPCReader (roughly speaking).
  StDAQMaker::Make
    readEvent     (first time)
      set fEventReader
      do not call fTPCReader->Update, since fTPCReader does not exist yet
  St_tpcdaq_Maker (first time)
      getTPCReader
        instantiate fTPCReader, which does Update in its ctor
  StDAQMaker::Make
    readEvent     (second time)
      set fEventReader
      call fTPCReader->Update, since fTPCReader does exist now
  St_tpcdaq_Maker (second time)
      getTPCReader
        return the old fTPCReader, so no Update in fTPCReader ctor

Or, in summary,
StDAQReader::fTRGReader = new StTRGReader(); // once
StDAQReader::fTRGReader->Update(); // from ctor for 1st ev, from readEvent later
fTRGReader=::getTRGReader(fDAQReader->fEventReader); // In StTRGReader::Update

=================================================================================
              THING NUMBER 3 THAT'S CONFUSING

I would have required client makers to call getTPCReader (and thus instantiate
StTPCReader) in the Init phase, so that the Update() in StDAQMaker::readEvent
could run for the first event.  Then the Update in the StTPCReader ctor could be
eliminated.   Thus all THINGs 1-4 would all be gone.

=================================================================================
              THING NUMBER 4 THAT'S CONFUSING

To maintain a parallel structure with what's already here, I'm going to implement
the trigger stuff like the TPC stuff (as described above in the INTRODUCTION)
and THINGs 1-2, instead of the simpler scheme described in THING 3.

=================================================================================
              THING NUMBER 5 THAT'S CONFUSING

We have two functions with similar names "getTheTrigReader" and
"getTRGReader".  Further, their return values are store in class
variables with similar names "fTRGReader" and "fTRGImpReader".

  StDAQReader::fTRGReader    = StTRGReader *StDAQReader::getTheTrigReader()
  StTRGReader::fTRGImpReader = TRGReader   *::getTRGReader (C fnct from DAQ)

Since there was already a StDAQReader::getTPCReader, you might expect that
I would have named A StDAQReader::getTRGReader, but then we'd have two
getTRGReader's, and even if all the C++ compilers kept them separate, I don't
want the potential for human confusion to be present.

I don't know what the Imp means, I just copied it from the TPC stuff so that the
two detectors' code would be as similar as possible, for ease of maintenance.

=================================================================================
             WORK OUTLINE FOR ADDING TRIGGER TO StDAQMaker ET AL

Add new class StTRGReader (victor).
  Update() {
    delete fTRGReader;
    fTRGReader = ::getTRGReader(fDAQReader->fEventReader);
  }
Add data accessor functions to StTRGReader.

In St_trg_Maker::Init(), add
          victorPrelim=(StDAQReader*)StGetObject(or whatever)

In St_trg_Maker::Make, put
          victor=(StTRGReader*)victorPrelim->getTheTriggerReader();
Do not put this in Init(), since the StTrgReader ctor must
run after StDaqReader::readEvent.

In StDAQReader, add new function
          StDAQReader::getTheTriggerReader()
which returns fTRGReader = new StTRGReader.
Calling
   victor = victorPrelim->getTheTriggerReader()
once per event is useless, the value does not change : it's
the same instantiation of StTRGReader with a different internal
TRG_Reader [see StTRGReader::Update() called from StDAQReader::readEvent]
for its wrapper functions which return the actual values.

In StDAQReader::readEvent, add line
    if(fTRGReader) fTRGReader->Update().

Be sure that Update is also called in the StTrgReader ctor.

=================================================================================
Chronlogical order:

During chain initialization:
  StChain insts StDAQMaker.
  The Init() function of StDAQMaker makes its table & calls Open().
  Open() insts fDAQReader = new StDAQReader, & puts fDAQReader into the table.
  St_tpcdaq_Maker::Init() sets StDAQReader *victorPrelim = table entry

Once per event:
  StDAQMaker::Make() calls fDAQReader->readEvent()
  St_tpcdaq_Maker::Make()
      StTPCReader *victor=victorPrelim->getTPCReader().
      victor->getPadList (wrapper for fZeroSuppressedReader->getPadList)
      victor->getSequences (wrapper for fZeroSuppressedReader->getSequences)

=================================================================================

Informal outline:

StChain insts StDAQMaker, which insts StDAQReader & passes it in table.
St_tpcdaq_Maker gets StDAQReader (victorPrelim) from table, and, once per event,
uses it to set StTPCReader *victor=victorPrelim->getTPCReader().  This funciton
getTPCReader() returns result from getDetectorReader, which does the 
TPCV2P0_Reader instantiation.  StTPCReader *victor also supplies wrappers for 
getPadList & getSequences.

=================================================================================

Interrelation of entities:

StChain         insts StDAQMaker & St_tpcdaq_Maker, & calls their Make()
                1/event.
StDAQMaker      insts StDAQReader during init & calls StDAQReader::readEvent
                1/event.
StDAQReader     insts StTPCReader
St_tpcdaq_Maker gets StDAQReader (victorPrelim) from table, & StTPCReader
                (victor) from StDAQReader
StTPCReader     insts & supplies wrappers for TPCV2P0_Reader.

=================================================================================

Location of code (StDAQReader and StTPCReader are in the same file):

StChain           StChain/StChain.cxx
StDAQMaker        StDAQMaker/StDAQMaker.cxx
StDAQReader       StDAQMaker/StDAQReader.cxx
St_tpcdaq_Maker   St_tpcdaq_Maker/St_tpcdaq_Maker.cxx
StTPCReader       StDAQMaker/StDAQReader.cxx
TPCV2P0_Reader    StDaqLib/TPC/TPCV2P0.cxx

=================================================================================

    StDAQReader                   StDaqLib/GENERIC/

TPC StDAQReader::getTPCReader     GENERIC/DetectorReader.cxx!!getDetectorReader
    returns StTPCReader (victor)  called from StTPCReader::setSector, sector=-1

TRG Need to add analog of          GENERIC/DetectorReader.cxx||getTRGReader
    StDAQReader::getTPCReader      (returns TRG_Reader*)
    for trigger.


=================================================================================

StDAQMaker::StDAQMaker    SetFile(inputFile)
StDAQMaker::Init          fDAQReaderSet = new St_ObjectSet("StDAQReader",...
                          Open();
StDAQMaker::Open          fDAQReader = new StDAQReader();
                          fDAQReaderSet->SetObject((TObject*)fDAQReader,kFALSE);
St_tpcdaq_Maker::Init     victorPrelim=(StDAQReader*)(herb->GetObject());
StDAQMaker::Make          fDAQReader->readEvent();
StDAQReader::readEvent    fEventReader = new EventReader();
                          fEventReader->InitEventReader(fFd, fOffset, 0);
                          fTPCReader->Update();
StTPCReader::Update       setSector(-1);
StTPCReader::setSector    if(sector==-1) fTPCImpReader=
                            ::getDetectorReader(fDAQReader->fEventReader,
                            fDAQReader->fTPCVersion);
                            Note that fDAQReader->fEventReader was
                            re-instantiated in StDAQReader::readEvent.
St_tpcdaq_Maker:Make      victor=victorPrelim->getTPCReader() // StTPCReader*
StDAQReader::getTPCReader fTPCReader = new StTPCReader(this);
                          return fTPCReader
StTPCReader::StTPCReader  fDAQReader = daqr; // daqr = StDAQReader

=================================================================================
                          LIST OF GLOBALS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Globals for class StDAQMaker

StDAQReader          *fDAQReader            holds StDAQReader
St_ObjectSet         *fDAQReaderSet         holds ptr fDAQReader

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Globals for class StDAQReader

EventReader          *fEventReader          instantiated once per event, arg for
                                            getDetectorReader
StTRGReader          *fTRGReader            holds StTRGReader 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Globals for class StTRGReader

StDAQReader          *fDAQReader            holds StDAQReader (which
                                            insts StTPCReader)
DetectorReader       *fTRGImpReader         holds TPCV2P0_Reader,
                                            -> fZeroSuppressedReader

=================================================================================
